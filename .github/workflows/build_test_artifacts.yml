name: SeamLess Plugin Suite

on:
  workflow_dispatch: # lets you run a build from github.com
  # Runs the workflow on push events but only for the develop branch
  push:
    branches: [ main ]

# When pushing new commits, cancel any running builds on that branch
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  PROJECT_NAME: seamless-plugin-suite
  PLUGINS: SeamLess_Client SeamLess_Main
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  # Use up to 4 cpus to build juceaide, etc
  CMAKE_BUILD_PARALLEL_LEVEL: 4 
  # Name of the build directory
  BUILD_DIR: build

jobs:

  setup:
    name: ${{ matrix.name }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        include:
          - os: macOS-latest
            name: macOS
            ccache: ccache
          - os: windows-latest
            name: Windows
            ccache: sccache
    
    runs-on: ${{ matrix.os }}
    steps:
      
      #A simple printout of the matrix
      - name: printout
        shell: bash
        run: |
          for PLUGIN in $PLUGINS; do 
            echo "PLUGIN=$PLUGIN";
            echo "matrix.name=${{ matrix.name }}";
            echo "matrix.os=${{ matrix.os }}";
            echo "matrix.ccache=${{ matrix.ccache }}";
          done;

      # We need the osxutils to get the codesign and notorization tools
      # We need to install ccache here for Windows to grab the right version
      - name: install macOS deps
        shell: bash
        run: |
          if [ "${{ matrix.name }}" == "macOS" ]; then
            brew install osxutils
          elif [ "${{ matrix.name }}" == "Windows" ]; then
            choco install ccache
          else
            echo "Unknown OS";
          fi;

      # With this we checkout to our repo
      - name: get repo and submodules
        uses: actions/checkout@v3
      # Here we get the submodules like juce
        with:
          submodules: true      
      
      # Using the ccache action to store the build cache and speed up the next builds
      - name: ccache
        uses: hendrikmuhs/ccache-action@main
        with:
          key: v3-${{ matrix.os }}-${{ env.BUILD_TYPE }}
          variant: ${{ matrix.ccache }}
      
      # Typical cmake configuration with default generator
      # With DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" we can build universal binaries for apple computers
      - name: cmake configure
        shell: bash
        run: cmake -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_C_COMPILER_LAUNCHER=${{ matrix.ccache }} -DCMAKE_CXX_COMPILER_LAUNCHER=${{ matrix.ccache }} -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"

      # Build the project
      - name: cmake build
        shell: bash
        run: cmake --build build --config ${{ env.BUILD_TYPE }} --parallel ${{ env.CMAKE_BUILD_PARALLEL_LEVEL }}
      
      # # Test the project
      # - name: ctest
      #   working-directory: ${{github.workspace}}/build
      #   run: ctest --verbose

      # Declaring the product name
      - name: declare product name
        shell: bash
        run: |
          echo "PACKAGE_DIR=artefacts/${{ env.PROJECT_NAME }}-${{ matrix.name}}/" >> $GITHUB_ENV
          echo "PRODUCT_NAME=${{ env.PROJECT_NAME }}-${{ matrix.name }}" >> $GITHUB_ENV
      
      # Moving the artefacts to a packaging directory
      - name: move artefacts
        shell: bash
        run: |
          mkdir -p ${{ env.PACKAGE_DIR }}
          for PLUGIN in $PLUGINS; do
            mv "${{ env.BUILD_DIR }}/${PLUGIN}/${PLUGIN}_artefacts/${{ env.BUILD_TYPE }}/VST3/${PLUGIN}.vst3" ${{ env.PACKAGE_DIR }};
            if [ "${{ matrix.name }}" == "macOS" ]; then
              mv "${{ env.BUILD_DIR }}/${PLUGIN}/${PLUGIN}_artefacts/${{ env.BUILD_TYPE }}/AU/${PLUGIN}.component" ${{ env.PACKAGE_DIR }};
              mv "${{ env.BUILD_DIR }}/${PLUGIN}/${PLUGIN}_artefacts/${{ env.BUILD_TYPE }}/Standalone/${PLUGIN}.app" ${{ env.PACKAGE_DIR }};
            elif [ "${{ matrix.name }}" == "Windows" ]; then
              mv "${{ env.BUILD_DIR }}/${PLUGIN}/${PLUGIN}_artefacts/${{ env.BUILD_TYPE }}/Standalone/${PLUGIN}.exe" ${{ env.PACKAGE_DIR }};
            else
              echo "Unknown OS";
            fi;
          done;

      # Zip the artefact
      - name: zip artefacts
        shell: bash
        run: |
          if [ "${{ matrix.name }}" == "macOS" ]; then
            zip -vr ${{ env.PRODUCT_NAME }}.zip ${{ env.PACKAGE_DIR }} -x "*.DS_Store"
          elif [ "${{ matrix.name }}" == "Windows" ]; then
            tar -a -c -f ${{ env.PRODUCT_NAME }}.zip ${{ env.PACKAGE_DIR }}
          else
            echo "Unknown OS";
          fi;
          
      - name: upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PRODUCT_NAME }}.zip
          path: artefacts/${{ env.PRODUCT_NAME }}.zip